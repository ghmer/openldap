name: Build and Push Docker Image

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

env:
  IMAGE_NAME: garthako/openldap
  IMAGE_TAG: v2.6

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "Docker Hub credentials are not configured."
            exit 1
          fi
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin || {
            echo "Docker Hub login failed."
            exit 1
          }

      - name: Prepare image tags
        id: prep
        env:
          GITHUB_IMAGE_TAG: ${{ vars.IMAGE_TAG }}
        run: |
          # Use GitHub environment variable if set, otherwise use workflow default
          if [ -n "$GITHUB_IMAGE_TAG" ]; then
            VERSION="$GITHUB_IMAGE_TAG"
          else
            VERSION="${IMAGE_TAG}"
          fi
          
          # Start with base tags (version from env/var + latest)
          TAG_ARGS="--tag ${IMAGE_NAME}:${VERSION} --tag ${IMAGE_NAME}:latest"
          
          # If this is a tag push, add the Git tag as an additional Docker tag
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            GIT_TAG="${GITHUB_REF#refs/tags/}"
            TAG_ARGS="${TAG_ARGS} --tag ${IMAGE_NAME}:${GIT_TAG}"
            echo "Building with tags: ${VERSION}, ${GIT_TAG}, latest"
          else
            echo "Building with tags: ${VERSION}, latest"
          fi
          
          echo "tags=${TAG_ARGS}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --file Dockerfile \
            --push \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            ${{ steps.prep.outputs.tags }} \
            . || {
              echo "Docker image build or push failed."
              exit 1
            }