name: Release Helm Chart

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to publish (e.g. v1.0.0). Required when running manually.'
        required: false
      chart_directory:
        description: 'Path to the chart directory.'
        required: false
        default: 'helm'

permissions:
  contents: write

env:
  CHART_DIR: ${{ github.event.inputs.chart_directory || 'helm' }}
  GH_PAGES_BRANCH: gh-pages
  HELM_REPO_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}

jobs:
  release:
    name: Package and publish Helm chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release tag
        id: release_tag
        env:
          WORKFLOW_INPUT_TAG: ${{ github.event.inputs.release_tag || '' }}
        run: |
          set -euo pipefail
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            TAG="${GITHUB_REF_NAME}"
          elif [ -n "${WORKFLOW_INPUT_TAG}" ]; then
            TAG="${WORKFLOW_INPUT_TAG}"
          else
            echo "A release tag (e.g. v1.0.0) is required when running this workflow manually." >&2
            exit 1
          fi
          echo "tag=${TAG}" >> "${GITHUB_OUTPUT}"

      - name: Configure git user
        run: |
          ACTOR="${GITHUB_ACTOR:-github-actions[bot]}"
          EMAIL="${ACTOR}@users.noreply.github.com"
          git config user.name "${ACTOR}"
          git config user.email "${EMAIL}"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Lint Helm chart
        run: helm lint "${CHART_DIR}"

      - name: Extract chart metadata
        id: chart_metadata
        run: |
          set -euo pipefail
          CHART_FILE="${CHART_DIR}/Chart.yaml"
          if [ ! -f "${CHART_FILE}" ]; then
            echo "Chart.yaml not found at ${CHART_FILE}" >&2
            exit 1
          fi
          CHART_NAME=$(grep '^name:' "${CHART_FILE}" | awk '{print $2}' | tr -d '"')
          VERSION=$(grep '^version:' "${CHART_FILE}" | awk '{print $2}' | tr -d '"')
          APP_VERSION=$(grep '^appVersion:' "${CHART_FILE}" | awk '{print $2}' | tr -d '"')
          if [ -z "${CHART_NAME}" ] || [ -z "${VERSION}" ]; then
            echo "Unable to parse chart name or version from ${CHART_FILE}" >&2
            exit 1
          fi
          echo "name=${CHART_NAME}" >> "${GITHUB_OUTPUT}"
          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "app_version=${APP_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Validate tag matches chart version
        env:
          TAG: ${{ steps.release_tag.outputs.tag }}
          VERSION: ${{ steps.chart_metadata.outputs.version }}
        run: |
          set -euo pipefail
          EXPECTED="v${VERSION}"
          if [ "${TAG}" != "${EXPECTED}" ]; then
            echo "The release tag (${TAG}) must match the chart version (${EXPECTED})." >&2
            exit 1
          fi

      - name: Package Helm chart
        id: package
        run: |
          set -euo pipefail
          mkdir -p dist
          helm package "${CHART_DIR}" --destination dist
          PACKAGE_PATH=$(ls dist/*.tgz)
          echo "path=${PACKAGE_PATH}" >> "${GITHUB_OUTPUT}"

      - name: Upload packaged chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.chart_metadata.outputs.name }}-${{ steps.chart_metadata.outputs.version }}
          path: dist/*.tgz

      - name: Create or update GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.release_tag.outputs.tag }}
          name: ${{ steps.chart_metadata.outputs.name }} ${{ steps.chart_metadata.outputs.version }}
          body: |
            Helm chart **${{ steps.chart_metadata.outputs.name }}** version **${{ steps.chart_metadata.outputs.version }}** (app version `${{ steps.chart_metadata.outputs.app_version }}`) is now available.
          artifacts: dist/*.tgz
          artifactContentType: application/gzip
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone gh-pages branch
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          REPO="https://${GITHUB_ACTOR}:${TOKEN}@github.com/${GITHUB_REPOSITORY}"
          if git ls-remote --exit-code origin "${GH_PAGES_BRANCH}" >/dev/null 2>&1; then
            git clone --branch "${GH_PAGES_BRANCH}" --depth 1 "${REPO}" gh-pages
          else
            git clone --depth 1 "${REPO}" gh-pages
            cd gh-pages
            git checkout --orphan "${GH_PAGES_BRANCH}"
            rm -rf *
            touch .nojekyll
            ACTOR="${GITHUB_ACTOR:-github-actions[bot]}"
            EMAIL="${ACTOR}@users.noreply.github.com"
            git config user.name "${ACTOR}"
            git config user.email "${EMAIL}"
            git add .nojekyll
            git commit -m "Initialize ${GH_PAGES_BRANCH} branch"
          fi

      - name: Update Helm repository index
        env:
          PACKAGE_PATH: ${{ steps.package.outputs.path }}
        run: |
          set -euo pipefail
          cp "${PACKAGE_PATH}" gh-pages/
          touch gh-pages/.nojekyll
          cd gh-pages
          if [ -f index.yaml ]; then
            mv index.yaml index-old.yaml
            helm repo index . --url "${HELM_REPO_URL}" --merge index-old.yaml
            rm index-old.yaml
          else
            helm repo index . --url "${HELM_REPO_URL}"
          fi

      - name: Publish Helm repository to gh-pages
        env:
          TAG: ${{ steps.release_tag.outputs.tag }}
          CHART_NAME: ${{ steps.chart_metadata.outputs.name }}
          VERSION: ${{ steps.chart_metadata.outputs.version }}
        run: |
          set -euo pipefail
          cd gh-pages
          ACTOR="${GITHUB_ACTOR:-github-actions[bot]}"
          EMAIL="${ACTOR}@users.noreply.github.com"
          git config user.name "${ACTOR}"
          git config user.email "${EMAIL}"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes detected in gh-pages branch."
            exit 0
          fi
          git commit -m "Publish ${CHART_NAME} ${VERSION} for ${TAG}"
          git push origin "${GH_PAGES_BRANCH}"