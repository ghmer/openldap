name: Release Helm Chart

on:
  # Trigger on push to main branch when helm/ directory changes
  # or on version tags
  push:
    branches:
      - main
    paths:
      - 'helm/**'
    tags:
      - 'v*'
  # Allow manual workflow dispatch
  workflow_dispatch:

# Set permissions for GitHub token
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.check_release.outputs.created }}
    steps:
      # Step 1: Checkout the repository with full history for chart-releaser
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Configure Git for GitHub Actions bot
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Step 3: Install Helm
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      # Step 4: Lint the Helm chart to validate syntax and structure
      - name: Lint Helm chart
        run: |
          helm lint helm/

      # Step 5: Create gh-pages branch if it doesn't exist
      - name: Create gh-pages branch if needed
        run: |
          if ! git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "Creating gh-pages branch..."
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initialize gh-pages branch"
            git push origin gh-pages
            git checkout -
          else
            echo "gh-pages branch already exists"
          fi

      # Step 6: Run chart-releaser to package and publish the chart
      # This action will:
      # - Package the chart into a .tgz file
      # - Create a GitHub release with the packaged chart
      # - Update the index.yaml file for the Helm repository
      # - Push changes to the gh-pages branch
      - name: Run chart-releaser
        id: chart_releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: .
          skip_existing: true
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        continue-on-error: true

      - name: Check if release was created
        id: check_release
        run: |
          if [ "${{ steps.chart_releaser.outcome }}" == "success" ]; then
            echo "created=true" >> "$GITHUB_OUTPUT"
            echo "Chart release created successfully"
          else
            echo "created=false" >> "$GITHUB_OUTPUT"
            echo "No new chart release (version may already exist)"
          fi

  # Deploy to GitHub Pages
  deploy-pages:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Step 1: Checkout repository to check for gh-pages branch
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Check if gh-pages branch exists
      - name: Check gh-pages branch exists
        id: check_branch
        run: |
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "gh-pages branch exists"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "gh-pages branch does not exist yet. Skipping deployment."
            echo "The branch will be created by chart-releaser. Run the workflow again after the first release."
          fi

      # Step 3: Checkout gh-pages branch if it exists
      - name: Checkout gh-pages branch
        if: steps.check_branch.outputs.exists == 'true'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      # Step 4: Setup Pages
      - name: Setup Pages
        if: steps.check_branch.outputs.exists == 'true'
        uses: actions/configure-pages@v4

      # Step 5: Upload artifact for GitHub Pages
      - name: Upload artifact
        if: steps.check_branch.outputs.exists == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      # Step 6: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: steps.check_branch.outputs.exists == 'true'
        id: deployment
        uses: actions/deploy-pages@v4